import asyncio
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from collections import defaultdict

TOKEN = os.getenv("TOKEN")
DATA_FILE = "trash.json"
ADMIN_IDS = [967075066]  # üîê –ó–ê–ú–ï–ù–ò –Ω–∞ —Å–≤–æ–π Telegram ID

def is_admin(user_id):
    return user_id in ADMIN_IDS

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            data = json.load(f)
            return defaultdict(int, data)
    return defaultdict(int)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

trash_counts = load_data()
user_ids = {}

bot = Bot(token=TOKEN)
dp = Dispatcher()

def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üóë –í—ã–Ω–µ—Å –º—É—Å–æ—Ä")
    builder.button(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

@dp.message(Command("start"))
async def start(message: Message):
    name = message.from_user.first_name
    user_ids[name] = message.from_user.id
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=get_main_keyboard()
    )

@dp.message(lambda msg: msg.text == "üóë –í—ã–Ω–µ—Å –º—É—Å–æ—Ä")
async def handle_trash(message: Message):
    user = message.from_user.first_name
    trash_counts[user] += 1
    save_data(trash_counts)
    await message.answer(f"{user}, —Ç—ã –≤—ã–Ω–µ—Å –º—É—Å–æ—Ä {trash_counts[user]} —Ä–∞–∑(–∞)!")

    min_count = min(trash_counts.values())
    for name, count in trash_counts.items():
        if count == min_count and name != user:
            user_id = user_ids.get(name)
            if user_id:
                try:
                    await bot.send_message(user_id, "üîî –¢–≤–æ—è –æ—á–µ—Ä–µ–¥—å –≤—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä!")
                except Exception:
                    pass

@dp.message(lambda msg: msg.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def stats(message: Message):
    if not trash_counts:
        await message.answer("–ï—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–Ω–æ—Å–∏–ª –º—É—Å–æ—Ä.")
        return
    stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–Ω–æ—Å–∞ –º—É—Å–æ—Ä–∞:\n"
    for user, count in sorted(trash_counts.items(), key=lambda x: -x[1]):
        stats_text += f"‚Ä¢ {user}: {count}\n"
    await message.answer(stats_text)

# --- –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ---

@dp.message(Command("reset"))
async def reset_stats(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        return
    trash_counts.clear()
    save_data(trash_counts)
    await message.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")

@dp.message(Command("remove"))
async def remove_user(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–£–∫–∞–∂–∏ –∏–º—è: /remove –ò–≤–∞–Ω")
        return
    name = args[1]
    if name in trash_counts:
        del trash_counts[name]
        save_data(trash_counts)
        await message.answer(f"‚ùå {name} —É–¥–∞–ª—ë–Ω –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    else:
        await message.answer("–ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

@dp.message(Command("add"))
async def add_count(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å—á—ë—Ç.")
        return
    args = message.text.split()
    if len(args) != 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /add –ò–≤–∞–Ω 2")
        return
    name, amount = args[1], args[2]
    try:
        amount = int(amount)
    except ValueError:
        await message.answer("–ß–∏—Å–ª–æ —É–∫–∞–∑–∞–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        return
    trash_counts[name] += amount
    save_data(trash_counts)
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} {name} (–∏—Ç–æ–≥–æ: {trash_counts[name]})")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
